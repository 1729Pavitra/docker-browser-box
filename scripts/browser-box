#!/bin/bash

PATH=/usr/sbin:/usr/bin:/sbin:/bin

prog=$(basename $0)
exec=$(which $prog)

# launch host binary if it exists
if [[ -n ${exec} ]]; then
  exec ${exec} $@
fi

# do we need to use sudo to start docker containers?
( id -Gn | grep docker ) || SUDO=sudo

USER_UID=$(id -u)
USER_GID=$(id -g)

XSOCK=/tmp/.X11-unix
XAUTH=/tmp/.docker.xauth

cleanup_stopped_browser_box_instances() {
  echo "Cleaning up stopped browser-box instances..."
  for c in $(${SUDO} docker ps -a -q)
  do
    image=$(${SUDO} docker inspect -f {{.Config.Image}} ${c})
    if [[ ${image} == "sameersbn/browser-box:latest" ]]; then
      running=$(${SUDO} docker inspect -f {{.State.Running}} ${c})
      if [[ ${running} != true ]]; then
        ${SUDO} docker rm -v "${c}" >/dev/null
      fi
    fi
  done
}

prepare_docker_caps_parameters() {
  case ${1} in
    google-chrome|google-chrome-stable|chromium-browser)
      CAPABILITIES+="--cap-add=SYS_ADMIN"
      ;;
  esac
}

prepare_docker_env_parameters() {
  ENV_VARS+=" --env=USER_UID=${USER_UID}"
  ENV_VARS+=" --env=USER_GID=${USER_GID}"
  ENV_VARS+=" --env=DISPLAY"
  ENV_VARS+=" --env=XAUTHORITY=${XAUTH}"
  ENV_VARS+=" --env=TZ=$(cat /etc/timezone)"
}

prepare_docker_volume_parameters() {
  touch ${XAUTH}
  xauth nlist :0 | sed -e 's/^..../ffff/' | xauth -f ${XAUTH} nmerge -

  VOLUMES+=" --volume=${XSOCK}:${XSOCK}"
  VOLUMES+=" --volume=${XAUTH}:${XAUTH}"
  VOLUMES+=" --volume=/run/user/${USER_UID}/pulse:/run/pulse"
}

prepare_docker_device_parameters() {
  # enumerate video devices for webcam support
  VIDEO_DEVICES=
  for device in /dev/video*
  do
    if [[ -c $device ]]; then
      VIDEO_DEVICES="${VIDEO_DEVICES} --device $device:$device"
    fi
  done
}

cleanup_stopped_browser_box_instances
prepare_docker_caps_parameters $prog
prepare_docker_env_parameters
prepare_docker_volume_parameters
prepare_docker_device_parameters

echo "Starting ${prog}..."
${SUDO} docker run -d \
  ${CAPABILITIES} \
  ${ENV_VARS} \
  ${VIDEO_DEVICES} \
  ${VOLUMES} \
  sameersbn/browser-box:latest ${prog} $@ >/dev/null
